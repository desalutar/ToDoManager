import UIKit

protocol AddTaskVCDelegate: AnyObject {
    func didCreateToDo(todo: ToDoItem)
    func didUpdateToDo(todo: ToDoItem)
    func didDeleteToDo()
}

// –î–∞–≤–∞–π —ç—Ç–æ—Ç –∫–ª–∞—Å—Å —Ç–æ–∂–µ —Å–¥–µ–ª–∞–µ–º `final`
class AddTaskViewController: UIViewController, UITextViewDelegate, UITextFieldDelegate {
    
    weak var delegate: AddTaskVCDelegate?
    
    // MARK: - Outlets
    @IBOutlet weak var textField: UITextField!
    @IBOutlet weak var textView: UITextView!
    
    // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –ª–æ–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    enum AlertString {
        static let placeholderForTextView: String = "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
        
        static let title: String = "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ?"
        static let message: String =  "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ"
        
        static let titleBack: String = "–ù–∞–∑–∞–¥"
        static let titleDelete: String = "–£–¥–∞–ª–∏—Ç—å"
    }
    
    enum controllerType {
        case create
        case edit
        case none
    }
    var type = controllerType.none
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        delegateStorage()
        textViewDidBeginEditing(textView)
        textViewDidEndEditing(textView)
        
    }
    
    // –ü–æ—á–µ–º—É `fileprivate` –∞ –Ω–µ `private` ?
    // –•–æ—Ç—è —è –∑–Ω–∞—é –ø–æ—á–µ–º—É, –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ç—ã –∑–Ω–∞–µ—à—å ?
    fileprivate func delegateStorage() {
        textField.becomeFirstResponder()
        textField.delegate = self
        textView.delegate = self
    }
    
    func configure(with todos: ToDoItem) {
        textField.text = todos.title
        textView.text = todos.description
    }
    
    // üí© —á—Ç–æ –∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ action `myButton` ? –ß—Ç–æ –º–Ω–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å ?
    // –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Ç–æ, —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç
    @IBAction private func myButton(_ sender: UIButton) {
        let todoFromTappedButton = ToDoItem(title: textField.text ?? "", description: textView.text)
        
        switch type {
        case .create:
            delegate?.didCreateToDo(todo: todoFromTappedButton) // here we send data to the object who is subscribed to our delegate
            dismiss(animated: true)
        case .edit:
            delegate?.didUpdateToDo(todo: todoFromTappedButton)
            navigationController?.popViewController(animated: true)
        case .none:
            break
        }
    }
    
    @IBAction func closeModalButton(_ sender: UIButton) {
        dismiss(animated: true)
    }
    
    @IBAction private func deleteButtonAction(_ sender: UIButton) { // add delete button
        let alert = UIAlertController(title: AlertString.title,
                                      message: AlertString.message,
                                      preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: AlertString.titleBack, style: .cancel))
        alert.addAction(UIAlertAction(title: AlertString.titleDelete,
                                      style: .destructive,
                                      handler: { (action) in
            self.dismiss(animated: true)
            self.delegate?.didDeleteToDo()
            self.navigationController?.popViewController(animated: true)
        }))
        present(alert, animated: true)
    }
    
    func textViewDidBeginEditing(_ textView: UITextView) {
        // —Ç—É—Ç –∑–∞–≤—è–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Ü–≤–µ—Ç –ª–µ–π–±–ª–∞, –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è –∏–¥–µ—è. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤—å —Ç–∞–∫, –Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö –º—ã –ø–æ–¥—Ä–µ—Ñ–∞—á–∏–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Å–¥–µ–ª–∞–µ–º –ø–æ –∫—Ä–∞—Å–æ—Ç–µ
        if textView.textColor == .lightGray {
            textView.text = ""
            textView.textColor = .black
        }
    }
    
    func textViewDidEndEditing(_ textView: UITextView) {
        if textView.text == "" {
            textView.text = AlertString.placeholderForTextView
            textView.textColor = .lightGray
        }
    }
}
